{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter rule: (pvq)^(~rvp)\n",
      "Enter the Query: p^r\n",
      "**********Truth Table Reference**********\n",
      "kb alpha\n",
      "**********\n",
      "True True\n",
      "----------\n",
      "True False\n",
      "----------\n",
      "The Knowledge Base does not entail query\n"
     ]
    }
   ],
   "source": [
    "combinations=[(True,True, True),(True,True,False),(True,False,True),(True,False, False),(False,True, True),(False,True, False),(False, False,True),(False,False, False)]\n",
    "variable={'p':0,'q':1, 'r':2}\n",
    "kb=''\n",
    "q=''\n",
    "priority={'~':3,'v':1,'^':2}\n",
    "def input_rules():\n",
    "    global kb, q\n",
    "    kb = (input(\"Enter rule: \"))\n",
    "    q = input(\"Enter the Query: \")\n",
    "def entailment():\n",
    "    global kb, q\n",
    "    print('*'*10+\"Truth Table Reference\"+'*'*10)\n",
    "    print('kb','alpha')\n",
    "    print('*'*10)\n",
    "    for comb in combinations:\n",
    "        s = evaluatePostfix(toPostfix(kb), comb)\n",
    "        f = evaluatePostfix(toPostfix(q), comb)\n",
    "        print(s, f)\n",
    "        print('-'*10)\n",
    "        if s and not f:\n",
    "            return False\n",
    "    return True\n",
    "def isOperand(c):\n",
    "    return c.isalpha() and c!='v'\n",
    "\n",
    "def isLeftParanthesis(c):\n",
    "    return c == '('\n",
    "\n",
    "def isRightParanthesis(c):\n",
    "    return c == ')'\n",
    "\n",
    "def isEmpty(stack):\n",
    "    return len(stack) == 0\n",
    "\n",
    "def peek(stack):\n",
    "    return stack[-1]\n",
    "\n",
    "def hasLessOrEqualPriority(c1, c2):\n",
    "    try:\n",
    "        return priority[c1]<=priority[c2]\n",
    "    except KeyError:\n",
    "        return False\n",
    "def toPostfix(infix):\n",
    "    stack = []\n",
    "    postfix = ''\n",
    "    for c in infix:\n",
    "        if isOperand(c):\n",
    "            postfix += c\n",
    "        else:\n",
    "            if isLeftParanthesis(c):\n",
    "                stack.append(c)\n",
    "            elif isRightParanthesis(c):\n",
    "                operator = stack.pop()\n",
    "                while not isLeftParanthesis(operator):\n",
    "                    postfix += operator\n",
    "                    operator = stack.pop()\n",
    "            else:\n",
    "                while (not isEmpty(stack)) and hasLessOrEqualPriority(c, peek(stack)):\n",
    "                    postfix += stack.pop()\n",
    "                stack.append(c)\n",
    "    while (not isEmpty(stack)):\n",
    "        postfix += stack.pop()\n",
    "    \n",
    "    return postfix\n",
    "def evaluatePostfix(exp, comb):\n",
    "    stack = []\n",
    "    for i in exp:\n",
    "        if isOperand(i):\n",
    "            stack.append(comb[variable[i]])\n",
    "        elif i == '~':\n",
    "            val1 = stack.pop()\n",
    "            stack.append(not val1)\n",
    "        else:\n",
    "            val1 = stack.pop()\n",
    "            val2 = stack.pop()\n",
    "            stack.append(_eval(i,val2,val1))\n",
    "    return stack.pop()\n",
    "def _eval(i, val1, val2):\n",
    "    if i == '^': \n",
    "        return val2 and val1\n",
    "    return val2 or val1\n",
    "#Test 1\n",
    "input_rules()\n",
    "ans = entailment()\n",
    "if ans:\n",
    "    print(\"The Knowledge Base entails query\")\n",
    "else:\n",
    "    print(\"The Knowledge Base does not entail query\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
